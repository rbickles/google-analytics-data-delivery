{"files":[{"id":"a0a77abb-871a-4172-9243-1d2ecaad82cf","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/New_York\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"AnalyticsData\",\n        \"version\": \"v1beta\",\n        \"serviceId\": \"analyticsdata\"\n      }\n    ]\n  },\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"MYSELF\"\n  }\n}"},{"id":"4a32a4b2-7e87-4b92-b111-0bde6b54d06d","name":"main","type":"server_js","source":"function main() {\n  \n \nfunction runReport() {\n  \n  const propertyId \u003d \u0027328851734\u0027;\n\n  try {\n    // Get Metrics\n    //Webpage hit count will actually be eventCount with the current set up. \n    const metric \u003d AnalyticsData.newMetric();\n    metric.name \u003d \u0027eventCount\u0027;\n\n    // Get Dimensions\n    const hostname \u003d AnalyticsData.newDimension();\n    hostname.name \u003d \u0027hostname\u0027;\n    const organizationId \u003d AnalyticsData.newDimension();\n    organizationId.name \u003d \u0027customEvent:organizationId\u0027;\n    const organizationName \u003d AnalyticsData.newDimension();\n    organizationName.name \u003d \u0027customEvent:organizationName\u0027;\n    const contentgroup_1 \u003d AnalyticsData.newDimension();\n    contentgroup_1.name \u003d \u0027customEvent:contentgroup1\u0027;\n    const contentgroup_2 \u003d AnalyticsData.newDimension();\n    contentgroup_2.name \u003d \u0027customEvent:contentgroup2\u0027;\n    const date \u003d AnalyticsData.newDimension();\n    date.name \u003d \u0027date\u0027;\n\n    const dateRange \u003d AnalyticsData.newDateRange();\n    let d \u003d new Date()\n    d.setDate(d.getDate()-7)\n    dateRange.startDate \u003d d.toISOString().split(\u0027T\u0027)[0];\n    dateRange.endDate \u003d \u0027yesterday\u0027;\n\n    const dimensionFilters \u003d AnalyticsData.newFilterExpression();\n    dimensionFilters.andGroup \u003d AnalyticsData.newFilterExpressionList();\n\n    const debugFilter \u003d AnalyticsData.newFilterExpression();\n    debugFilter.notExpression \u003d AnalyticsData.newFilter();\n    debugFilter.notExpression.filter \u003d AnalyticsData.newFilter();\n    debugFilter.notExpression.filter.fieldName \u003d \u0027customEvent:contentgroup1\u0027;\n    debugFilter.notExpression.filter.stringFilter \u003d AnalyticsData.newStringFilter();\n    debugFilter.notExpression.filter.stringFilter.matchType \u003d \u0027CONTAINS\u0027;\n    debugFilter.notExpression.filter.stringFilter.value \u003d \u0027gtm_debug\u0027;\n\n    const hostnameFilter \u003d AnalyticsData.newFilterExpression();\n    hostnameFilter.filter \u003d AnalyticsData.newFilter();\n    hostnameFilter.filter.fieldName \u003d \u0027hostname\u0027;\n    hostnameFilter.filter.stringFilter \u003d AnalyticsData.newStringFilter();\n    hostnameFilter.filter.stringFilter.matchType \u003d \u0027CONTAINS\u0027;\n    hostnameFilter.filter.stringFilter.value \u003d \u0027healthadvocate\u0027;\n\n    const eventNameFilter \u003d AnalyticsData.newFilterExpression();\n    eventNameFilter.filter \u003d AnalyticsData.newFilter();\n    eventNameFilter.filter.fieldName \u003d \u0027eventName\u0027;\n    eventNameFilter.filter.stringFilter \u003d AnalyticsData.newStringFilter();\n    eventNameFilter.filter.stringFilter.matchType \u003d \u0027EXACT\u0027;\n    eventNameFilter.filter.stringFilter.value \u003d \u0027User Details\u0027;\n\n    dimensionFilters.andGroup.expressions \u003d [debugFilter, hostnameFilter, eventNameFilter];\n\n    const request \u003d AnalyticsData.newRunReportRequest();\n    request.dimensions \u003d [hostname, organizationId, organizationName, contentgroup_1, contentgroup_2, date];\n    request.metrics \u003d [metric];\n    request.dateRanges \u003d dateRange;\n    request.keepEmptyRows \u003d true;\n    request.dimensionFilter \u003d dimensionFilters;\n\n\n    const report \u003d AnalyticsData.Properties.runReport(request,\n        \u0027properties/\u0027 + propertyId);\n    if (!report.rows) {\n      Logger.log(\u0027No rows returned.\u0027);\n      return;\n    }\n\n    const data \u003d [];\n\n    report.rows.forEach((row) \u003d\u003e {\n      data.push({\n        CSMOrgID: row.dimensionValues[1].value, \n        OrgName: row.dimensionValues[2].value.includes(\u0027,\u0027) ? `\"${row.dimensionValues[2].value}\"` : row.dimensionValues[2].value, \n        ModuleName: row.dimensionValues[3].value, \n        DivisionName: row.dimensionValues[4].value,\n        Datadate: new Date(row.dimensionValues[5].value.substring(0,4),\n                          row.dimensionValues[5].value.substring(4,6)-1,\n                          row.dimensionValues[5].value.substring(6,)\n                          ).toLocaleDateString(\u0027en-US\u0027),\n        WebPageHitCount: row.metricValues[0].value\n      })\n    })\n\n    emailCSV(csvBuilder(data));\n\n\n  } catch (e) {\n    // TODO (Developer) - Handle exception\n    Logger.log(\u0027Failed with error: %s\u0027, e.error);\n  }\n}\n\n\nrunReport();\n\n}\n"},{"id":"1461c736-67c3-4026-9c2d-bff8d8b08cd1","name":"csvBuilder","type":"server_js","source":"function csvBuilder(data, length) {\n  \n  const csvRows \u003d [];\n\n  const headers \u003d Object.keys(data[0]);\n\n  csvRows.push(headers.join(\u0027,\u0027));\n\n  //Sort data by dataDate then webPageHitCount\n  data.sort((a,b) \u003d\u003e {\n    let date_a \u003d new Date(a.Datadate)\n    let date_b \u003d new Date(b.Datadate)\n    return date_a - date_b;\n  });\n\n  //filter out \u0027No Organization Name\u0027\n  const filteredData \u003d data.filter(object \u003d\u003e {\n    return object.OrgName !\u003d\u003d \u0027No Organization Name\u0027\n  });\n\n  //filter out \u0027No Organization Name\u0027\n  const filteredData_Final \u003d filteredData.filter(object \u003d\u003e {\n    return (object.DivisionName !\u003d\u003d \u0027(not set)\u0027 \u0026\u0026 \n            object.DivisionName !\u003d\u003d \u0027#\u0027 \u0026\u0026 \n            object.ModuleName !\u003d\u003d \u0027#\u0027 \u0026\u0026\n            object.ModuleName !\u003d\u003d \u0027Contact\u0027 \u0026\u0026\n            object.DivisionName !\u003d\u003d \u0027Contact\u0027 \u0026\u0026\n            object.ModuleName !\u003d\u003d \u0027?\u0027 \u0026\u0026 \n            object.DivisionName !\u003d\u003d \u0027?\u0027\n    )\n  });\n\n  filteredData_Final.forEach((object) \u003d\u003e {\n    csvRows.push([\n      object.CSMOrgID,\n      object.OrgName,\n      object.ModuleName,\n      object.DivisionName,\n      object.Datadate,\n      object.WebPageHitCount\n    ].join(\u0027,\u0027))\n  })\n\n  return csvRows.join(\u0027\\n\u0027)\n\n\n\n\n\n}\n"},{"id":"349f6c60-c991-4d1e-aa77-cbe713045e6e","name":"emailCSV","type":"server_js","source":"function emailCSV(data) {\n \n  const blob \u003d Utilities.newBlob(data, \u0027text/csv\u0027 )\n\nlet start_d \u003d new Date()\n    start_d.setDate(start_d.getDate()-7)\n\nlet end_d \u003d new Date();\n    end_d.setDate(end_d.getDate()-1);\n\n  blob.setName(`${start_d.toISOString().split(\u0027T\u0027)[0]}_${end_d.toISOString().split(\u0027T\u0027)[0]}_10398428.csv`)\n\n  MailApp.sendEmail({\n    to: \u0027rykeranalytics@gmail.com, plewis@lifeadvantages.com, kzipp@lifeadvantages.com, mfehrenbach@lifeadvantages.com\u0027,\n    subject: \u0027Personal Advantage Utilization Report\u0027,\n    body: \u0027Please see attached.\u0027,\n    attachments: blob\n  })\n\n}\n"}]}